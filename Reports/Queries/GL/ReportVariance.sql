SELECT
    COALESCE(A.COD_SCENARIO, P.COD_SCENARIO) AS COD_SCENARIO, 
    COALESCE(A.COD_PERIODO, P.COD_PERIODO) AS COD_PERIODO,
    COALESCE(A.DESC_CONTO_ELEGER00, P.DESC_CONTO_ELEGER00) AS DESC_CONTO_ELEGER00,
    COALESCE(A.FED_CALL_CODE, P.FED_CALL_CODE) AS FED_CALL_CODE,
    COALESCE(A.DESC_CONTO_ELEGER0, P.DESC_CONTO_ELEGER0) AS DESC_CONTO_ELEGER0,
    COALESCE(A.DATA_SOURCE, P.DATA_SOURCE) AS DATA_SOURCE,
    COALESCE(A.COD_AZIENDA, P.COD_AZIENDA) AS BUSINESS_UNIT,
    COALESCE(A.COD_AZI_CTP, P.COD_AZI_CTP) AS AFFILIATE,
    COALESCE(A.COD_CONTO, P.COD_CONTO) AS GL_KEY_CODE,
    COALESCE(A.COD_CATEGORIA, P.COD_CATEGORIA) AS CATEGORY,
    COALESCE(A.COD_DEST1, P.COD_DEST1) AS GL_ACCOUNT,
    COALESCE(
      CASE
        WHEN SUBSTR(A.COD_DEST2, 3) = 'BLC'
          THEN SUBSTR(A.COD_DEST2, 5)
        ELSE NULL
      END,
      CASE
        WHEN SUBSTR(P.COD_DEST2, 3) = 'BLC'
          THEN SUBSTR(P.COD_DEST2, 5)
        ELSE NULL
      END
    ) AS OPERATING_UNIT,
    COALESCE(
      CASE
        WHEN SUBSTR(A.COD_DEST2, 3) = 'DPT'
          THEN SUBSTR(A.COD_DEST2, 5)
        ELSE NULL
      END,
      CASE
        WHEN SUBSTR(P.COD_DEST2, 3) = 'DPT'
          THEN SUBSTR(P.COD_DEST2, 5)
        ELSE NULL
      END
    ) AS DEPTID,
    COALESCE(
      CASE
        WHEN SUBSTR(A.COD_DEST2_CTP, 3) = 'BLC'
          THEN SUBSTR(A.COD_DEST2_CTP, 5)
        ELSE NULL
      END,
      CASE
        WHEN SUBSTR(P.COD_DEST2_CTP, 3) = 'BLC'
          THEN SUBSTR(P.COD_DEST2_CTP, 5)
        ELSE NULL
      END
    ) AS AFFILIATE_OBU,
    COALESCE(
      CASE
        WHEN SUBSTR(A.COD_DEST2_CTP, 3) = 'DPT'
          THEN SUBSTR(A.COD_DEST2_CTP, 5)
        ELSE NULL
      END,
      CASE
        WHEN SUBSTR(P.COD_DEST2_CTP, 3) = 'DPT'
          THEN SUBSTR(P.COD_DEST2_CTP, 5)
        ELSE NULL
      END
    ) AS AFFILIATE_DEPTID,
    COALESCE(A.COD_DEST3, P.COD_DEST3) AS PRODUCT,
    COALESCE(A.COD_DEST4, P.COD_DEST4) AS CUSTOMER_CLASS,
    COALESCE(A.COD_DEST5, P.COD_DEST5) AS CALL_CODE,
    COALESCE(A.NOTE, P.NOTE) AS PROJECTID,
    COALESCE(A.COD_VALUTA, P.COD_VALUTA) AS BASE_CURRENCY,
    COALESCE(A.COD_VALUTA_ORIGINARIA, P.COD_VALUTA_ORIGINARIA) AS CURRENCY_CD,
    A.IMPORTO AS BASE_EQUIVALENT,
    P.IMPORTO AS BASE_EQUIVALENT_PQ,
    NVL(A.IMPORTO, 0) - NVL(P.IMPORTO, 0) AS DELTA
FROM
(
  SELECT
    A.COD_SCENARIO,
    A.COD_PERIODO,
    CGG.DESC_CONTO_ELEGER0 AS DESC_CONTO_ELEGER00,
    C.ATTRIBUTO5 AS FED_CALL_CODE,
    CG.DESC_CONTO_ELEGER0,
    A.DATA_SOURCE,
    A.COD_AZIENDA,
    A.COD_AZI_CTP,
    A.COD_CONTO,
    A.COD_CATEGORIA,
    A.COD_DEST1,
    A.COD_DEST2,
    A.COD_DEST2_CTP,
    A.COD_DEST3,
    A.COD_DEST4,
    A.COD_DEST5,
    A.NOTE,
    A.COD_VALUTA,
    A.IMPORTO,
    A.COD_VALUTA_ORIGINARIA,
    A.IMPORTO_VALUTA_ORIGINARIA
  FROM 
    (
      SELECT
        'ADJUSTMENTS' AS DATA_SOURCE,
        D.COD_CONTO AS COD_CONTO_REP,
        D.COD_SCENARIO,
        D.COD_PERIODO,
        D.COD_AZIENDA,
        D.COD_AZI_CTP,
        D.COD_CONTO,
        COD_CATEGORIA,
        COD_DEST1,
        D.COD_DEST2,
        D.COD_DEST2_CTP,
        D.COD_DEST3,
        D.COD_DEST4,
        D.COD_DEST5,
        NOTE,
        COD_VALUTA,
        D.IMPORTO2 * 1000 AS IMPORTO,
        D.COD_VALUTA2 AS COD_VALUTA_ORIGINARIA,
        D.IMPORTO2 * 1000 AS IMPORTO_VALUTA_ORIGINARIA
      FROM
        DATI_RETT_RIGA D
        INNER JOIN
        (
          SELECT DISTINCT
            DRILL.COD_SCENARIO,
            DRILL.COD_PERIODO,
            DRILL.COD_CONTO
          FROM
            RB_DRILL_INSTRUMENT DRILL
            INNER JOIN
            DATI_SALDI_LORDI FD
            ON
              DRILL.OID_FORM_DATI = FD.OID_DATI_SALDI_LORDI
            WHERE
              DRILL.COD_AZIENDA IN (${$Entity.code})
        ) DRILL
        ON
          D.COD_SCENARIO = DRILL.COD_SCENARIO
          AND D.COD_PERIODO = DRILL.COD_PERIODO
          AND D.COD_CONTO = DRILL.COD_CONTO
      WHERE
        D.COD_SCENARIO IN (${A1})
        AND D.COD_PERIODO IN (${B1})
        AND D.COD_AZIENDA IN (${$Entity.code})
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 3) = ${A3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 4) = ${B3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 7) IS NULL
        AND D.COD_CATEGORIA IN ('ADJ_REP_R', 'ADJ_REP_NR')
      UNION ALL
      SELECT
        B.SOURCE AS DATA_SOURCE,
        A.COD_CONTO AS COD_CONTO_REP,
        B.COD_SCENARIO,
        B.COD_PERIODO,
        B.COD_AZIENDA,
        B.COD_AZI_CTP,
        B.COD_CONTO,
        B.COD_CATEGORIA,
        B.COD_DEST1,
        B.COD_DEST2,
        B.COD_DEST2_CTP,
        B.COD_DEST3,
        B.COD_DEST4,
        B.COD_DEST5,
        B.NOTE,
        B.COD_VALUTA,
        SUM(B.IMPORTO_1),
        B.COD_VALUTA_ORIGINARIA,
        SUM(B.IMPORTO_2)
      FROM
        (
          SELECT DISTINCT
            COD_SCENARIO,
            COD_PERIODO,
            COD_CONTO
          FROM
            DATI_SALDI_LORDI
          WHERE
            COD_CATEGORIA = 'ORI_REP'
            AND PROVENIENZA LIKE 'MAP_REP_' || ${A3} || '_' || ${C3} || '_%'
            AND COD_AZIENDA IN (${$Entity.code})
        )  C
        INNER JOIN
        RB_DRILL_INSTRUMENT A
        ON
          A.COD_SCENARIO = C.COD_SCENARIO
          AND A.COD_PERIODO = C.COD_PERIODO
          AND A.COD_CONTO = C.COD_CONTO
        INNER JOIN
        RB_V_GL_AND_MANUAL_IC B
        ON
          A.OID_FORM_DATI = B.OID_FORM_DATI
      WHERE
        A.COD_SCENARIO IN (${A1})
        AND A.COD_PERIODO IN (${B1})
        AND A.COD_AZIENDA IN (${$Entity.code})
        AND A.PROVENIENZA LIKE 'MAP_REP_' || ${A3} || '_' || ${C3} || '_%'
        AND RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO, 'RE', 3) = ${A3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO, 'RE', 4) = ${B3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO, 'RE', 7) IS NULL
        AND A.COD_CATEGORIA IN ('ORI_REP')
      GROUP BY
        B.SOURCE,
        A.COD_CONTO,
        B.COD_SCENARIO,
        B.COD_PERIODO,
        B.COD_AZIENDA,
        B.COD_AZI_CTP,
        B.COD_CONTO,
        B.COD_CATEGORIA,
        B.COD_DEST1,
        B.COD_DEST2,
        B.COD_DEST2_CTP,
        B.COD_DEST3,
        B.COD_DEST4,
        B.COD_DEST5,
        B.NOTE,
        B.COD_VALUTA,
        B.COD_VALUTA_ORIGINARIA
      UNION ALL
      SELECT
        'ROUNDING' AS DATA_SOURCE,
        D.COD_CONTO AS COD_CONTO_REP,
        D.COD_SCENARIO,
        D.COD_PERIODO,
        D.COD_AZIENDA,
        NULL AS COD_AZI_CTP,
        D.COD_CONTO,
        D.COD_CATEGORIA,
        D.COD_DEST1,
        D.COD_DEST2,
        NULL AS COD_DEST2_CTP,
        D.COD_DEST3,
        D.COD_DEST4,
        D.COD_DEST5,
        D.NOTE,
        D.COD_VALUTA,
        D.IMPORTO * 1000 AS IMPORTO,
        D.COD_VALUTA_ORIGINARIA,
        D.IMPORTO_VALUTA_ORIGINARIA * 1000 AS IMPORTO_VALUTA_ORIGINARIA
      FROM
        DATI_SALDI_LORDI D
        INNER JOIN
        (
          SELECT DISTINCT
            DRILL.COD_SCENARIO,
            DRILL.COD_PERIODO,
            DRILL.COD_CONTO
          FROM
            RB_DRILL_INSTRUMENT DRILL
            INNER JOIN
            DATI_SALDI_LORDI FD
            ON
              DRILL.OID_FORM_DATI = FD.OID_DATI_SALDI_LORDI
            WHERE
              DRILL.COD_AZIENDA IN (${$Entity.code})
        ) DRILL
        ON
          D.COD_SCENARIO = DRILL.COD_SCENARIO
          AND D.COD_PERIODO = DRILL.COD_PERIODO
          AND D.COD_CONTO = DRILL.COD_CONTO
      WHERE
        D.COD_SCENARIO IN (${A1})
        AND D.COD_PERIODO IN (${B1})
        AND D.COD_AZIENDA IN (${$Entity.code})
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 3) = ${A3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 4) = ${B3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 7) IS NULL
        AND D.COD_CATEGORIA IN ('ORI_REP')
        AND D.PROVENIENZA = 'PROC_BALANCING'
      UNION ALL
      SELECT
        'OVERWRITE' AS DATA_SOURCE,
        D.COD_CONTO AS COD_CONTO_REP,
        D.COD_SCENARIO,
        D.COD_PERIODO,
        D.COD_AZIENDA,
        NULL AS COD_AZI_CTP,
        D.COD_CONTO,
        D.COD_CATEGORIA,
        D.COD_DEST1,
        D.COD_DEST2,
        NULL AS COD_DEST2_CTP,
        D.COD_DEST3,
        D.COD_DEST4,
        D.COD_DEST5,
        D.NOTE,
        D.COD_VALUTA,
        D.IMPORTO * 1000 AS IMPORTO,
        D.COD_VALUTA_ORIGINARIA,
        D.IMPORTO_VALUTA_ORIGINARIA * 1000 AS IMPORTO_VALUTA_ORIGINARIA
      FROM
        DATI_SALDI_LORDI D
        INNER JOIN
        (
          SELECT DISTINCT
            DRILL.COD_SCENARIO,
            DRILL.COD_PERIODO,
            DRILL.COD_CONTO
          FROM
            RB_DRILL_INSTRUMENT DRILL
            INNER JOIN
            DATI_SALDI_LORDI FD
            ON
              DRILL.OID_FORM_DATI = FD.OID_DATI_SALDI_LORDI
            WHERE
              DRILL.COD_AZIENDA IN (${$Entity.code})
        ) DRILL
        ON
          D.COD_SCENARIO = DRILL.COD_SCENARIO
          AND D.COD_PERIODO = DRILL.COD_PERIODO
          AND D.COD_CONTO = DRILL.COD_CONTO
      WHERE
        D.COD_SCENARIO IN (${A1})
        AND D.COD_PERIODO IN (${B1})
        AND D.COD_AZIENDA IN (${$Entity.code})
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 3) = ${A3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 4) = ${B3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 7) IS NULL
        AND D.COD_CATEGORIA = 'ORI_REP'
        AND D.PROVENIENZA NOT LIKE 'MAP_REP_' || ${A3} || '_' || ${C3} || '_%'
        AND D.PROVENIENZA <> 'PROC_BALANCING'
    ) A
    LEFT OUTER JOIN
    CONTO_GERARCHIA CG
    ON
      RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO_REP, 'RE', 6) = CG.COD_CONTO_ELEGER
    LEFT OUTER JOIN
    CONTO_GERARCHIA CGG
    ON
      RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO_REP, 'RE', 5) = CGG.COD_CONTO_ELEGER
    LEFT OUTER JOIN
    CONTO C
    ON
      A.COD_CONTO_REP = C.COD_CONTO
  WHERE
    CG.COD_CONTO_GERARCHIA = 'RE'
    AND CGG.COD_CONTO_GERARCHIA = 'RE'
  ORDER BY
    CGG.DESC_CONTO_ELEGER0 ASC,
    C.ATTRIBUTO5 ASC,
    CG.DESC_CONTO_ELEGER0 ASC,
    A.COD_SCENARIO ASC,
    A.COD_PERIODO ASC,
    A.DATA_SOURCE DESC
) A
FULL OUTER JOIN
(
    SELECT
      A.COD_SCENARIO,
      A.COD_PERIODO,
      CGG.DESC_CONTO_ELEGER0 AS DESC_CONTO_ELEGER00,
      C.ATTRIBUTO5 AS FED_CALL_CODE,
      CG.DESC_CONTO_ELEGER0,
      A.DATA_SOURCE,
      A.COD_AZIENDA,
      A.COD_AZI_CTP,
      A.COD_CONTO,
      A.COD_CATEGORIA,
      A.COD_DEST1,
      A.COD_DEST2,
      A.COD_DEST2_CTP,
      A.COD_DEST3,
      A.COD_DEST4,
      A.COD_DEST5,
      A.NOTE,
      A.COD_VALUTA,
      A.IMPORTO,
      A.COD_VALUTA_ORIGINARIA,
      A.IMPORTO_VALUTA_ORIGINARIA
  FROM 
    (
      SELECT
        'ADJUSTMENTS' AS DATA_SOURCE,
        D.COD_CONTO AS COD_CONTO_REP,
        D.COD_SCENARIO,
        D.COD_PERIODO,
        D.COD_AZIENDA,
        D.COD_AZI_CTP,
        D.COD_CONTO,
        COD_CATEGORIA,
        COD_DEST1,
        D.COD_DEST2,
        D.COD_DEST2_CTP,
        D.COD_DEST3,
        D.COD_DEST4,
        D.COD_DEST5,
        NOTE,
        COD_VALUTA,
        D.IMPORTO2 * 1000 AS IMPORTO,
        D.COD_VALUTA2 AS COD_VALUTA_ORIGINARIA,
        D.IMPORTO2 * 1000 AS IMPORTO_VALUTA_ORIGINARIA
      FROM
        DATI_RETT_RIGA D
        INNER JOIN
        (
          SELECT DISTINCT
            DRILL.COD_SCENARIO,
            DRILL.COD_PERIODO,
            DRILL.COD_CONTO
          FROM
            RB_DRILL_INSTRUMENT DRILL
            INNER JOIN
            DATI_SALDI_LORDI FD
            ON
              DRILL.OID_FORM_DATI = FD.OID_DATI_SALDI_LORDI
            WHERE
              DRILL.COD_AZIENDA IN (${$Entity.code})
        ) DRILL
        ON
          D.COD_SCENARIO = DRILL.COD_SCENARIO
          AND D.COD_PERIODO = DRILL.COD_PERIODO
          AND D.COD_CONTO = DRILL.COD_CONTO
      WHERE
        D.COD_SCENARIO IN (${A2})
        AND D.COD_PERIODO IN (${B2})
        AND D.COD_AZIENDA IN (${$Entity.code})
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 3) = ${A3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 4) = ${B3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 7) IS NULL
        AND D.COD_CATEGORIA IN ('ADJ_REP_R', 'ADJ_REP_NR')
      UNION ALL
      SELECT
        B.SOURCE AS DATA_SOURCE,
        A.COD_CONTO AS COD_CONTO_REP,
        B.COD_SCENARIO,
        B.COD_PERIODO,
        B.COD_AZIENDA,
        B.COD_AZI_CTP,
        B.COD_CONTO,
        B.COD_CATEGORIA,
        B.COD_DEST1,
        B.COD_DEST2,
        B.COD_DEST2_CTP,
        B.COD_DEST3,
        B.COD_DEST4,
        B.COD_DEST5,
        B.NOTE,
        B.COD_VALUTA,
        SUM(B.IMPORTO_1),
        B.COD_VALUTA_ORIGINARIA,
        SUM(B.IMPORTO_2)
      FROM
        (
          SELECT DISTINCT
            COD_SCENARIO,
            COD_PERIODO,
            COD_CONTO
          FROM
            DATI_SALDI_LORDI
          WHERE
            COD_CATEGORIA = 'ORI_REP'
            AND PROVENIENZA LIKE 'MAP_REP_' || ${A3} || '_' || ${C3} || '_%'
            AND COD_AZIENDA IN (${$Entity.code})
        )  C
        INNER JOIN
        RB_DRILL_INSTRUMENT A
        ON
          A.COD_SCENARIO = C.COD_SCENARIO
          AND A.COD_PERIODO = C.COD_PERIODO
          AND A.COD_CONTO = C.COD_CONTO
        INNER JOIN
        RB_V_GL_AND_MANUAL_IC B
        ON
          A.OID_FORM_DATI = B.OID_FORM_DATI
      WHERE
        A.COD_SCENARIO IN (${A2})
        AND A.COD_PERIODO IN (${B2})
        AND A.COD_AZIENDA IN (${$Entity.code})
        AND A.PROVENIENZA LIKE 'MAP_REP_' || ${A3} || '_' || ${C3} || '_%'
        AND RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO, 'RE', 3) = ${A3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO, 'RE', 4) = ${B3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO, 'RE', 7) IS NULL
        AND A.COD_CATEGORIA IN ('ORI_REP')
      GROUP BY
        B.SOURCE,
        A.COD_CONTO,
        B.COD_SCENARIO,
        B.COD_PERIODO,
        B.COD_AZIENDA,
        B.COD_AZI_CTP,
        B.COD_CONTO,
        B.COD_CATEGORIA,
        B.COD_DEST1,
        B.COD_DEST2,
        B.COD_DEST2_CTP,
        B.COD_DEST3,
        B.COD_DEST4,
        B.COD_DEST5,
        B.NOTE,
        B.COD_VALUTA,
        B.COD_VALUTA_ORIGINARIA
      UNION ALL
      SELECT
        'ROUNDING' AS DATA_SOURCE,
        D.COD_CONTO AS COD_CONTO_REP,
        D.COD_SCENARIO,
        D.COD_PERIODO,
        D.COD_AZIENDA,
        NULL AS COD_AZI_CTP,
        D.COD_CONTO,
        D.COD_CATEGORIA,
        D.COD_DEST1,
        D.COD_DEST2,
        NULL AS COD_DEST2_CTP,
        D.COD_DEST3,
        D.COD_DEST4,
        D.COD_DEST5,
        D.NOTE,
        D.COD_VALUTA,
        D.IMPORTO * 1000 AS IMPORTO,
        D.COD_VALUTA_ORIGINARIA,
        D.IMPORTO_VALUTA_ORIGINARIA * 1000 AS IMPORTO_VALUTA_ORIGINARIA
      FROM
        DATI_SALDI_LORDI D
        INNER JOIN
        (
          SELECT DISTINCT
            DRILL.COD_SCENARIO,
            DRILL.COD_PERIODO,
            DRILL.COD_CONTO
          FROM
            RB_DRILL_INSTRUMENT DRILL
            INNER JOIN
            DATI_SALDI_LORDI FD
            ON
              DRILL.OID_FORM_DATI = FD.OID_DATI_SALDI_LORDI
            WHERE
              DRILL.COD_AZIENDA IN (${$Entity.code})
        ) DRILL
        ON
          D.COD_SCENARIO = DRILL.COD_SCENARIO
          AND D.COD_PERIODO = DRILL.COD_PERIODO
          AND D.COD_CONTO = DRILL.COD_CONTO
      WHERE
        D.COD_SCENARIO IN (${A2})
        AND D.COD_PERIODO IN (${B2})
        AND D.COD_AZIENDA IN (${$Entity.code})
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 3) = ${A3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 4) = ${B3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 7) IS NULL
        AND D.COD_CATEGORIA IN ('ORI_REP')
        AND D.PROVENIENZA = 'PROC_BALANCING'
      UNION ALL
      SELECT
        'OVERWRITE' AS DATA_SOURCE,
        D.COD_CONTO AS COD_CONTO_REP,
        D.COD_SCENARIO,
        D.COD_PERIODO,
        D.COD_AZIENDA,
        NULL AS COD_AZI_CTP,
        D.COD_CONTO,
        D.COD_CATEGORIA,
        D.COD_DEST1,
        D.COD_DEST2,
        NULL AS COD_DEST2_CTP,
        D.COD_DEST3,
        D.COD_DEST4,
        D.COD_DEST5,
        D.NOTE,
        D.COD_VALUTA,
        D.IMPORTO * 1000 AS IMPORTO,
        D.COD_VALUTA_ORIGINARIA,
        D.IMPORTO_VALUTA_ORIGINARIA * 1000 AS IMPORTO_VALUTA_ORIGINARIA
      FROM
        DATI_SALDI_LORDI D
        INNER JOIN
        (
          SELECT DISTINCT
            DRILL.COD_SCENARIO,
            DRILL.COD_PERIODO,
            DRILL.COD_CONTO
          FROM
            RB_DRILL_INSTRUMENT DRILL
            INNER JOIN
            DATI_SALDI_LORDI FD
            ON
              DRILL.OID_FORM_DATI = FD.OID_DATI_SALDI_LORDI
            WHERE
              DRILL.COD_AZIENDA IN (${$Entity.code})
        ) DRILL
        ON
          D.COD_SCENARIO = DRILL.COD_SCENARIO
          AND D.COD_PERIODO = DRILL.COD_PERIODO
          AND D.COD_CONTO = DRILL.COD_CONTO
      WHERE
        D.COD_SCENARIO IN (${A2})
        AND D.COD_PERIODO IN (${B3})
        AND D.COD_AZIENDA IN (${$Entity.code})
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 3) = ${A3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 4) = ${B3}
        AND RB_F_TGK_GET_ACCOUNT_NODE(D.COD_CONTO, 'RE', 7) IS NULL
        AND D.COD_CATEGORIA = 'ORI_REP'
        AND D.PROVENIENZA NOT LIKE 'MAP_REP_' || ${A3} || '_' || ${C3} || '_%'
        AND D.PROVENIENZA <> 'PROC_BALANCING'
    ) A
    LEFT OUTER JOIN
    CONTO_GERARCHIA CG
    ON
      RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO_REP, 'RE', 6) = CG.COD_CONTO_ELEGER
    LEFT OUTER JOIN
    CONTO_GERARCHIA CGG
    ON
      RB_F_TGK_GET_ACCOUNT_NODE(A.COD_CONTO_REP, 'RE', 5) = CGG.COD_CONTO_ELEGER
    LEFT OUTER JOIN
    CONTO C
    ON
      A.COD_CONTO_REP = C.COD_CONTO
  WHERE
    CG.COD_CONTO_GERARCHIA = 'RE'
    AND CGG.COD_CONTO_GERARCHIA = 'RE'
  ORDER BY
    CGG.DESC_CONTO_ELEGER0 ASC,
    C.ATTRIBUTO5 ASC,
    CG.DESC_CONTO_ELEGER0 ASC,
    A.COD_SCENARIO ASC,
    A.COD_PERIODO ASC,
    A.DATA_SOURCE DESC
) P
ON
  A.DATA_SOURCE = P.DATA_SOURCE
  AND A.COD_CONTO = P.COD_CONTO
  AND A.COD_AZIENDA = P.COD_AZIENDA
  AND A.COD_AZI_CTP = P.COD_AZI_CTP
  AND A.COD_CATEGORIA = P.COD_CATEGORIA
  AND A.COD_DEST1 = P.COD_DEST1
  AND A.COD_DEST2 = P.COD_DEST2
  AND A.COD_DEST2_CTP = P.COD_DEST2_CTP
  AND A.COD_DEST3 = P.COD_DEST3
  AND A.COD_DEST4 = P.COD_DEST4
  AND A.COD_DEST5 = P.COD_DEST5
  AND A.COD_VALUTA = P.COD_VALUTA
  AND A.COD_VALUTA_ORIGINARIA = P.COD_VALUTA_ORIGINARIA
  AND A.NOTE = P.NOTE